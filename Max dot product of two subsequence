Q .  Given two arrays nums1 and nums2.

Return the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length.

A subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, [2,3,5] is a subsequence of [1,2,3,4,5] while [1,5,3] is not).

 

Example 1:

Input: nums1 = [2,1,-2,5], nums2 = [3,0,-6]
Output: 18
Explanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.
Their dot product is (2*3 + (-2)*(-6)) = 18.
Example 2:

Input: nums1 = [3,-2], nums2 = [2,-6,7]
Output: 21
Explanation: Take subsequence [3] from nums1 and subsequence [7] from nums2.
Their dot product is (3*7) = 21.
Example 3:

Input: nums1 = [-1,-1], nums2 = [1,1]
Output: -1
Explanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2.
Their dot product is -1.



LOGIC : check whether the arrays are empty or not
if is it then return 0;
now make an 2d array storing the value of [nums1[0] * nums2[0]]
then loop the array of num1 and inside that create an array for dp[i] and intialize it with empty array
then dp[i][0] = Math.max( nums1[i] * nums2[0],dp[i-1][0] )....

same goes with nums2 arr dp[0][i]....


//////////////////////////////////////// CODE /////////////////////
var maxDotProduct = function(nums1, nums2) {
    var m = nums1.length;
    var n = nums2.length;
    if (!m || !n) return 0;
    var dp = [[nums1[0] * nums2[0]]];
    for (var i = 1; i < m; i++) {
        dp[i] = [];
        dp[i][0] = Math.max(nums1[i] * nums2[0], dp[i-1][0]);
    }
    for (var i = 1; i < n; i++) dp[0][i] = Math.max(nums1[0] * nums2[i], dp[0][i-1]);
    for (var i = 1; i < m; i++) {
        for (var j = 1; j < n; j++) {
            var val = nums1[i] * nums2[j];
            dp[i][j] = Math.max(val, val + dp[i-1][j-1], dp[i][j-1], dp[i-1][j]);
        }
    }
    return dp[m - 1][n - 1];
};
