// Minimum Number of Operations to Make Array Continuous
Q. You are given an integer array nums. In one operation, you can replace any element in nums with any integer.

nums is considered continuous if both of the following conditions are fulfilled:

All elements in nums are unique.
The difference between the maximum element and the minimum element in nums equals nums.length - 1.
For example, nums = [4, 2, 5, 3] is continuous, but nums = [1, 2, 3, 5, 6] is not continuous.

Return the minimum number of operations to make nums continuous.


Let's Solve this : 

Problem:ðŸ¦¯
The problem statement asks you to find the minimum number of operations needed to make an integer array "continuous." An array is considered continuous if:
1. All elements in the array are unique.
2. The difference between the maximum element and the minimum element in the array equals the length of the array minus one.
You are given an integer array nums, and you can perform operations to replace elements with any integer. Your goal is to minimize the number of such operations required to make the array continuous.


Solution:ðŸš€
1. Sort the nums array in ascending order to ensure that the elements are in increasing order.
2. Create a set from the sorted nums array to remove duplicates. This step ensures that all elements are unique.
3. Initialize a variable ans with a large value to store the minimum number of operations required to make the array continuous. You can use sys.maxsize for this purpose.
4. Iterate through the unique elements of the sorted nums array. For each element s in the iteration:
Calculate the expected end element e of a continuous subarray. This is done by adding n - 1 to the current element s, where n is the length of the input array nums. This step ensures that the difference between the maximum and minimum elements in the continuous subarray is n - 1.
Use the bisect_right function to find the index idx where the expected end element e would be inserted into the sorted nums array while maintaining its order. This index represents the position where the end element of the continuous subarray would be inserted if it exists in nums.
Update the ans variable with the minimum number of operations needed to make the array continuous. This minimum is calculated as n - (idx - i), where idx is the position of the expected end element, and i is the current position of the start element.
5. Finally, return the minimum number of operations stored in the ans variable.


Insights used to solve the problem:
Sorting the array and removing duplicates by creating a set helps in ensuring that all elements are unique and in ascending order, which simplifies the calculation of the expected end element.
The key insight is that for an array to be continuous, the difference between the maximum and minimum elements should be equal to n - 1, where n is the length of the array. Therefore, you can calculate the expected end element based on the start element and find its position in the sorted array to determine the minimum number of operations needed.
Using the bisect_right function is an efficient way to find the index where the expected end element would be inserted, as it takes advantage of the sorted nature of the array.
Keeping track of the minimum number of operations (ans) during the iteration and updating it whenever a more optimal solution is found ensures that you find the minimum operations overall.



Code -------------------------------
var minOperations = function(nums) {
    nums.sort(function(a, b) { return a - b; });
    let n = nums.length;
    nums = [...new Set(nums)]; 

    let ans = Number.MAX_SAFE_INTEGER;

    for (let i = 0; i < nums.length; i++) {
        let s = nums[i];
        let e = s + n - 1;
        let idx = binarySearch(nums, e);

        ans = Math.min(ans, n - (idx - i));
    }

    return ans;
};

function binarySearch(nums, target) {
    let left = 0;
    let right = nums.length - 1;

    while (left <= right) {
        let mid = left + Math.floor((right - left) / 2);

        if (nums[mid] <= target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    return left;
}
